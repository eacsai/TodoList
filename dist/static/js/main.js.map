{"version":3,"file":"static/js/main.js","mappings":"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","sources":["/Users/wqw/Documents/js/todoList/src/App.tsx","/Users/wqw/Documents/js/todoList/src/pages/todo/index.tsx","/Users/wqw/Documents/js/todoList/src/pages/todo/style.ts","/Users/wqw/Documents/js/todoList/src/pages/todoForm/index.tsx","/Users/wqw/Documents/js/todoList/src/pages/todoForm/style.ts","/Users/wqw/Documents/js/todoList/src/pages/todoList/index.tsx","/Users/wqw/Documents/js/todoList/src/pages/todoList/style.ts"],"sourcesContent":["// 第三方\nimport { memo, Suspense } from 'react';\nimport { Switch, Route } from '@modern-js/runtime/router';\n// import { Provider } from 'react-redux';\n// 工具类\n// import store from './store';\n// 组件\n// import AppHeader from 'components/App-header';\nimport TodoList from '@/pages/todoList';\n\nexport default memo(function App() {\n  return (\n    <Switch>\n      <Route exact={true} path=\"/\">\n        <Suspense fallback={<div>page loading</div>}>\n          <TodoList />\n        </Suspense>\n      </Route>\n    </Switch>\n  );\n});\n","import { memo, useState, ChangeEvent, FormEvent, FC } from 'react';\nimport { AiFillEdit, AiFillRest } from 'react-icons/ai';\nimport { TodoWrapper } from './style';\n\ninterface Props {\n  todo: { id: string; task: string; completed: boolean };\n  remove: any;\n  update: any;\n  finish: any;\n  key: string;\n}\n\nconst Todo: FC<Props> = memo(props => {\n  const { todo, remove, update, finish } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const [task, setTask] = useState(todo.task);\n\n  const handleClick = (e: any) => {\n    remove(e.currentTarget.id);\n  };\n  const toggleFrom = () => {\n    setIsEditing(!isEditing);\n  };\n  const handleUpdate = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    update(todo.id, task);\n    toggleFrom();\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setTask(e.target.value);\n  };\n  const toggleCompleted = (e: any) => {\n    finish(e.target.id);\n  };\n\n  let result;\n  if (isEditing) {\n    result = (\n      <TodoWrapper>\n        <form className=\"Todo-edit-form\" onSubmit={handleUpdate}>\n          <input onChange={handleChange} value={task} type=\"text\" />\n          <button>Save</button>\n        </form>\n      </TodoWrapper>\n    );\n  } else {\n    result = (\n      <TodoWrapper>\n        <li\n          id={todo.id}\n          onClick={toggleCompleted}\n          className={todo.completed ? 'Todo-task completed' : 'Todo-task'}\n        >\n          {todo.task}\n        </li>\n        <div className=\"Todo-buttons\">\n          <button onClick={toggleFrom}>\n            <AiFillEdit />\n          </button>\n          <button onClick={handleClick} id={todo.id}>\n            <AiFillRest />\n          </button>\n        </div>\n      </TodoWrapper>\n    );\n  }\n  return result;\n});\nexport default Todo;\n","import styled from '@modern-js/runtime/styled';\n\nexport const TodoWrapper = styled.div`\n  display: flex;\n  margin: 0 -3rem 4px;\n  padding: 1.1rem 3rem;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.1);\n  .Todo-task {\n    position: relative;\n    transition: opacity 0.4s linear;\n  }\n\n  .Todo-task.completed {\n    opacity: 0.6;\n  }\n\n  .Todo-task.completed:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: -0.5rem;\n    display: block;\n    width: 0%;\n    height: 2px;\n    background: #fff;\n    animation: strikeitem 0.5s ease-out 0s forwards;\n  }\n\n  @keyframes strikeitem {\n    to {\n      width: calc(100% + 1rem);\n    }\n  }\n\n  .Todo-buttons {\n    flex-shrink: 0;\n    padding-left: 0.7em;\n  }\n\n  .Todo-buttons button {\n    border: none;\n    font-size: 1em;\n    margin: 0.4em;\n    background: none;\n    -webkit-appearance: none;\n    cursor: pointer;\n    color: #fff;\n  }\n\n  .Todo-edit-form {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .Todo-edit-form label {\n    min-width: 100%;\n    margin-bottom: 0.5rem;\n    font-size: 1.3rem;\n  }\n\n  .Todo-edit-form input {\n    flex-grow: 1;\n    border: none;\n    background: #f7f1f1;\n    padding: 0 1.5em;\n    font-size: initial;\n  }\n\n  .Todo-edit-form button {\n    padding: 0 1.3rem;\n    border: none;\n    background: #ff6666;\n    color: white;\n    text-transform: uppercase;\n    font-weight: bold;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    margin-left: 5px;\n    cursor: pointer;\n    transform: background 0.2s ease-out;\n  }\n\n  .Todo-edit-form button:hover {\n    background: #ff5e5e;\n  }\n\n  .Todo-edit-form input,\n  .Todo-edit-form button {\n    font-family: 'Quicksand', sans-serif;\n    height: 3rem;\n  }\n`;\n","import { useReducer, FC, memo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoFormWrapper } from './style';\n\ninterface Props {\n  createTodo: any;\n}\nconst TodoForm: FC<Props> = memo(props => {\n  const { createTodo } = props;\n  const [userInput, setUserInput] = useReducer(\n    (state: any, newState: any) => ({ ...state, ...newState }),\n    {\n      task: '',\n    },\n  );\n\n  const handleChange = (e: any) => {\n    setUserInput({ [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    const newTodo = { id: uuidv4(), task: userInput.task, completed: false };\n    createTodo(newTodo);\n    setUserInput({ task: '' });\n  };\n\n  return (\n    <TodoFormWrapper>\n      <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n        <label htmlFor=\"task\">New todo</label>\n        <input\n          value={userInput.task}\n          onChange={handleChange}\n          id=\"task\"\n          type=\"text\"\n          name=\"task\"\n          placeholder=\"New Todo\"\n        />\n        <button>Add Todo</button>\n      </form>\n    </TodoFormWrapper>\n  );\n});\n\nexport default TodoForm;\n","import styled from '@modern-js/runtime/styled';\n\nexport const TodoFormWrapper = styled.div`\n  .NewTodoForm {\n    margin-top: 3rem;\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .NewTodoForm label {\n    min-width: 100%;\n    margin-bottom: 0.5rem;\n    font-size: 1.3rem;\n  }\n\n  .NewTodoForm input {\n    flex-grow: 1;\n    border: none;\n    background: #f7f1f1;\n    padding: 0 1.5em;\n    font-size: initial;\n  }\n\n  .NewTodoForm button {\n    padding: 0 1.3rem;\n    border: none;\n    background: #ff6666;\n    color: white;\n    text-transform: uppercase;\n    font-weight: bold;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    margin-left: 5px;\n    cursor: pointer;\n    transform: background 0.2s ease-out;\n  }\n\n  .NewTodoForm button:hover {\n    background: #ff5e5e;\n  }\n\n  .NewTodoForm input,\n  .NewTodoForm button {\n    font-family: 'Quicksand', sans-serif;\n    height: 3rem;\n  }\n`;\n","import { useState, FC, useEffect, useCallback, memo, useRef } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Todo from '../todo';\nimport TodoForm from '../todoForm';\nimport { TodoListWrapper } from './style';\n\ninterface NewTodo {\n  id: string;\n  task: string;\n  completed: boolean;\n}\n\nconst TodoList: FC = memo(() => {\n  const [todos, setTodos] = useState([\n    { id: uuidv4(), task: 'task 1', completed: false },\n    { id: uuidv4(), task: 'task 2', completed: true },\n  ]);\n  const todosRef = useRef(todos);\n  useEffect(() => {\n    const getTodos: NewTodo[] = JSON.parse(\n      localStorage.getItem('todos') || '[]',\n    );\n    setTodos(getTodos);\n  }, []);\n\n  useEffect(() => {\n    todosRef.current = todos;\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const create = useCallback((newTodo: NewTodo) => {\n    setTodos([...todosRef.current, newTodo]);\n  }, []);\n\n  const remove = useCallback(\n    (id: string) => {\n      setTodos(todos.filter(todo => todo.id !== id));\n    },\n    [todos],\n  );\n\n  const update = useCallback(\n    (id: string, updtedTask: string) => {\n      const updatedTodos = todos.map(todo => {\n        if (todo.id === id) {\n          return { ...todo, task: updtedTask };\n        }\n        return todo;\n      });\n      setTodos(updatedTodos);\n    },\n    [todos],\n  );\n\n  const finish = useCallback(\n    (id: string) => {\n      const updatedTodos = todos.map(todo => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      });\n      setTodos(updatedTodos);\n    },\n    [todos],\n  );\n\n  const todosList = todos.map(todo => (\n    <Todo\n      finish={finish}\n      update={update}\n      remove={remove}\n      key={todo.id}\n      todo={todo}\n    />\n  ));\n\n  return (\n    <TodoListWrapper>\n      <h1>\n        Todo List <span>A simple React Todo List App</span>\n      </h1>\n      <ul>{todosList}</ul>\n      <TodoForm createTodo={create} />\n    </TodoListWrapper>\n  );\n});\n\nexport default TodoList;\n","import styled from '@modern-js/runtime/styled';\n\nexport const TodoListWrapper = styled.div`\n  margin: 4rem auto;\n  padding: 2rem 3rem 3rem;\n  max-width: 500px;\n  background: #ff6666;\n  color: #fff;\n  box-shadow: -20px -20px 0px 0px rgba(100, 100, 100, 0.1);\n  ul {\n    margin-top: 2.6rem;\n    list-style: none;\n  }\n  h1 {\n    font-weight: normal;\n    font-size: 2.6rem;\n    letter-spacing: 0.05em;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.3);\n  }\n  h1 span {\n    display: block;\n    font-size: 0.8rem;\n    margin-bottom: 0.7rem;\n    margin-left: 3px;\n    margin-top: 0.2rem;\n  }\n`;\n"],"names":[],"sourceRoot":""}